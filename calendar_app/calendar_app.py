import datetime
import dateparser
import re
import warnings
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.togglebutton import ToggleButton
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
from kivy.clock import Clock
from kivy.graphics import Color, RoundedRectangle
from kivy.uix.widget import Widget


def validate_date(date_str):
    date_str = date_str.strip()
    current_year = datetime.datetime.now().year

    def has_year_in_string(s):
        if re.search(r'\b\d{4}\b', s):
            return True
        parts = re.split(r'[ .-/]', s)
        if parts and re.match(r'^\d{2}$', parts[-1]) and len(parts) == 3:
            return True
        return False

    has_year = has_year_in_string(date_str)

    parsed = None
    if has_year:
        try:
            with warnings.catch_warnings():
                warnings.simplefilter("ignore", DeprecationWarning)
                parsed = dateparser.parse(date_str, languages=['uk'])
        except Exception:
            parsed = None

    if parsed:
        return parsed

    # –§–æ—Ä–º–∞—Ç: —Ü–∏—Ñ—Ä–∞.—Ü–∏—Ñ—Ä–∞.—Ü–∏—Ñ—Ä–∞ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å.—Ä—ñ–∫ –∞–±–æ —Ä—ñ–∫.–º—ñ—Å—è—Ü—å.–¥–µ–Ω—å)
    match3 = re.match(r'^(\d{1,4})[ .-/](\d{1,2})[ .-/](\d{1,4})$', date_str)
    if match3:
        a, b, c = int(match3.group(1)), int(match3.group(2)), int(match3.group(3))

        if a > 31 and c <= 31:
            year, month, day = a, b, c
        elif c > 31 and a <= 31:
            day, month, year = a, b, c
        else:
            day, month, year = a, b, c

        if year < 100:
            year += 2000

        try:
            return datetime.datetime(year, month, day)
        except ValueError:
            try:
                return datetime.datetime(year, day, month)
            except ValueError:
                return None

    # –§–æ—Ä–º–∞—Ç: –¥–µ–Ω—å.–º—ñ—Å—è—Ü—å (–±–µ–∑ —Ä–æ–∫—É)
    match2 = re.match(r'^(\d{1,2})[ .-/](\d{1,2})$', date_str)
    if match2:
        a, b = int(match2.group(1)), int(match2.group(2))

        if a > 12:
            day, month = a, b
        elif b > 12:
            day, month = b, a
        else:
            day, month = a, b

        year = current_year

        try:
            return datetime.datetime(year, month, day)
        except ValueError:
            return None

    # –§–æ—Ä–º–∞—Ç: —Ç—ñ–ª—å–∫–∏ –¥–µ–Ω—å
    match1 = re.match(r'^(\d{1,2})$', date_str)
    if match1:
        day = int(match1.group(1))
        month = datetime.datetime.now().month
        year = current_year

        try:
            return datetime.datetime(year, month, day)
        except ValueError:
            return None

    # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ ‚Äî —á–µ—Ä–µ–∑ dateparser
    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", DeprecationWarning)
            parsed = dateparser.parse(date_str, languages=['uk'])
            if parsed:
                return parsed
    except Exception:
        pass

    return None


def calculate_days_between(date1_str, date2_str):
    """–û–±—á–∏—Å–ª—é—î —Ä—ñ–∑–Ω–∏—Ü—é –≤ –¥–Ω—è—Ö –º—ñ–∂ –¥–≤–æ–º–∞ –¥–∞—Ç–∞–º–∏"""
    date1 = validate_date(date1_str)
    date2 = validate_date(date2_str)

    if date1 and date2:
        diff = abs((date2 - date1).days)
        return f"{diff} –¥–Ω—ñ–≤"
    return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞—Ç–∏"


def get_weekday(date_str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ–Ω—å —Ç–∏–∂–Ω—è –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –¥–∞—Ç–∏"""
    date = validate_date(date_str)
    if date:
        weekdays = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
        return weekdays[date.weekday()]
    return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∞—Ç–∞"


def calculate(expression):
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ –º—ñ–∂ –¥–∞—Ç–∞–º–∏
        if ' - ' in expression and expression.count(' - ') == 1 and not re.search(r'\d+\s*-\s*\d+$', expression):
            parts = expression.split(' - ')
            if len(parts) == 2:
                return calculate_days_between(parts[0].strip(), parts[1].strip())

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –¥–Ω—è —Ç–∏–∂–Ω—è
        if expression.startswith('–¥–µ–Ω—å:') or expression.startswith('day:'):
            date_part = expression.split(':', 1)[1].strip()
            return get_weekday(date_part)

        # –ó–≤–∏—á–∞–π–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–∞—Ç —Ç–∞ —á–∏—Å–µ–ª
        expression = re.sub(r'(\d)([+*/-])(\d)', r'\1 \2 \3', expression)
        expression = re.sub(r'([/.])', r' \1 ', expression)
        expression = re.sub(r'\s+', ' ', expression).strip()

        # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–Ω–æ–∂–µ–Ω–Ω—è —Ç–∞ –¥—ñ–ª–µ–Ω–Ω—è
        match = re.match(r'^(.+?)\s*([+\-*/])\s*(\d+(?:\.\d+)?)$', expression)
        if not match:
            return "‚ùå –§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞ ¬± —á–∏—Å–ª–æ / —á–∏—Å–ª–æ ¬± —á–∏—Å–ª–æ / –¥–∞—Ç–∞1 - –¥–∞—Ç–∞2"

        first_part, operation, second_part = match.groups()
        parsed_date = validate_date(first_part.strip())

        if parsed_date:
            try:
                days = float(second_part)
            except ValueError:
                return "‚ùå –î—Ä—É–≥–∏–π –æ–ø–µ—Ä–∞–Ω–¥ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º"

            if operation == '+':
                result_date = parsed_date + datetime.timedelta(days=int(days))
                return result_date.strftime('%d.%m.%Y')
            elif operation == '-':
                result_date = parsed_date - datetime.timedelta(days=int(days))
                return result_date.strftime('%d.%m.%Y')
            else:
                return "‚ùå –î–ª—è –¥–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ '+' –∞–±–æ '-'"
        else:
            try:
                first_number = float(first_part)
                second_number = float(second_part)
            except ValueError:
                return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —á–∏—Å–ª–∞ –∞–±–æ –¥–∞—Ç–∞"

            if operation == '+':
                result = first_number + second_number
            elif operation == '-':
                result = first_number - second_number
            elif operation == '*':
                result = first_number * second_number
            elif operation == '/':
                if second_number == 0:
                    return "‚ùå –î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å"
                result = first_number / second_number
            else:
                return "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result == int(result):
                return str(int(result))
            else:
                return f"{result:.2f}"

    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"


class RoundedButton(Button):
    def __init__(self, bg_color=(0.2, 0.6, 1, 1), **kwargs):
        super().__init__(**kwargs)
        self.bg_color = bg_color
        self.bind(size=self.update_graphics, pos=self.update_graphics)

    def update_graphics(self, *args):
        self.canvas.before.clear()
        with self.canvas.before:
            Color(*self.bg_color)
            RoundedRectangle(pos=self.pos, size=self.size, radius=[10])


class HelpPopup(Popup):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.title = '–î–æ–ø–æ–º–æ–≥–∞'
        self.size_hint = (0.9, 0.8)

        help_text = """
üìÖ –ö–ê–õ–ï–ù–î–ê–†-–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†

üî¢ –û–°–ù–û–í–ù–Ü –û–ü–ï–†–ê–¶–Ü–á:
‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è —á–∏—Å–µ–ª: 5 + 3, 10 - 4
‚Ä¢ –ú–Ω–æ–∂–µ–Ω–Ω—è/–¥—ñ–ª–µ–Ω–Ω—è: 6 * 2, 15 / 3

üìÖ –û–ü–ï–†–ê–¶–Ü–á –ó –î–ê–¢–ê–ú–ò:
‚Ä¢ –î–æ–¥–∞—Ç–∏ –¥–Ω—ñ –¥–æ –¥–∞—Ç–∏: 15.12.2024 + 30
‚Ä¢ –í—ñ–¥–Ω—è—Ç–∏ –¥–Ω—ñ –≤—ñ–¥ –¥–∞—Ç–∏: 01.01.2025 - 10
‚Ä¢ –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –¥–∞—Ç–∞–º–∏: 25.12.2024 - 01.01.2024

üóìÔ∏è –§–û–†–ú–ê–¢–ò –î–ê–¢:
‚Ä¢ –ü–æ–≤–Ω–∞ –¥–∞—Ç–∞: 15.12.2024, 15/12/2024
‚Ä¢ –ë–µ–∑ —Ä–æ–∫—É: 15.12 (–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫)
‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–µ–Ω—å: 15 (–ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)

üìç –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á:
‚Ä¢ –î–µ–Ω—å —Ç–∏–∂–Ω—è: –¥–µ–Ω—å:15.12.2024
‚Ä¢ –®–≤–∏–¥–∫—ñ –¥–∞—Ç–∏: –°—å–æ–≥–æ–¥–Ω—ñ, –ó–∞–≤—Ç—Ä–∞, –í—á–æ—Ä–∞

‚è∞ –ü–û–¢–û–ß–ù–ò–ô –ß–ê–° –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –∑–≤–µ—Ä—Ö—É

üí° –ü–†–ò–ö–õ–ê–î–ò:
‚Ä¢ —Å—å–æ–≥–æ–¥–Ω—ñ + 7 ‚Üí –¥–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å
‚Ä¢ 01.01.2025 - 25.12.2024 ‚Üí –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
‚Ä¢ –¥–µ–Ω—å:25.12.2024 ‚Üí –¥–µ–Ω—å —Ç–∏–∂–Ω—è
        """

        scroll = ScrollView()
        label = Label(text=help_text, text_size=(None, None), halign='left', valign='top')
        scroll.add_widget(label)
        self.content = scroll


class CalculatorLayout(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', padding=15, spacing=15, **kwargs)

        # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        self.time_label = Label(
            text=datetime.datetime.now().strftime('%H:%M:%S | %d.%m.%Y'),
            font_size=18,
            size_hint=(1, 0.1),
            color=(0.3, 0.3, 0.3, 1)
        )
        self.add_widget(self.time_label)

        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
        Clock.schedule_interval(self.update_time, 1)

        # –ü–æ–ª–µ –≤–≤–æ–¥—É
        self.input = TextInput(
            hint_text='–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ä–∞–∑ –∞–±–æ –¥–∞—Ç—É...',
            multiline=False,
            readonly=True,
            font_size=22,
            size_hint=(1, 0.15),
            background_color=(0.95, 0.95, 0.95, 1)
        )
        self.add_widget(self.input)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result = Label(
            text='–†–µ–∑—É–ª—å—Ç–∞—Ç: ',
            font_size=20,
            size_hint=(1, 0.15),
            color=(0.2, 0.7, 0.2, 1),
            text_size=(None, None),
            halign='center'
        )
        self.add_widget(self.result)

        # –®–≤–∏–¥–∫—ñ –¥–∞—Ç–∏
        quick_dates_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.12), spacing=10)

        today_btn = RoundedButton(text='–°—å–æ–≥–æ–¥–Ω—ñ', bg_color=(0.2, 0.7, 0.2, 1))
        today_btn.bind(on_press=lambda x: self.add_quick_date('—Å—å–æ–≥–æ–¥–Ω—ñ'))

        tomorrow_btn = RoundedButton(text='–ó–∞–≤—Ç—Ä–∞', bg_color=(0.2, 0.5, 0.8, 1))
        tomorrow_btn.bind(on_press=lambda x: self.add_quick_date('–∑–∞–≤—Ç—Ä–∞'))

        yesterday_btn = RoundedButton(text='–í—á–æ—Ä–∞', bg_color=(0.8, 0.5, 0.2, 1))
        yesterday_btn.bind(on_press=lambda x: self.add_quick_date('–≤—á–æ—Ä–∞'))

        quick_dates_layout.add_widget(today_btn)
        quick_dates_layout.add_widget(tomorrow_btn)
        quick_dates_layout.add_widget(yesterday_btn)
        self.add_widget(quick_dates_layout)

        # –û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        self.keyboard = GridLayout(cols=4, spacing=8, size_hint=(1, 1.5))

        # –ö–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
        buttons_config = [
            ('7', (0.4, 0.4, 0.4, 1)), ('8', (0.4, 0.4, 0.4, 1)), ('9', (0.4, 0.4, 0.4, 1)), ('+', (1, 0.6, 0.2, 1)),
            ('4', (0.4, 0.4, 0.4, 1)), ('5', (0.4, 0.4, 0.4, 1)), ('6', (0.4, 0.4, 0.4, 1)), ('-', (1, 0.6, 0.2, 1)),
            ('1', (0.4, 0.4, 0.4, 1)), ('2', (0.4, 0.4, 0.4, 1)), ('3', (0.4, 0.4, 0.4, 1)), ('*', (1, 0.6, 0.2, 1)),
            ('0', (0.4, 0.4, 0.4, 1)), ('.', (0.4, 0.4, 0.4, 1)), ('/', (1, 0.6, 0.2, 1)), ('=', (0.2, 0.8, 0.2, 1)),
        ]

        for text, color in buttons_config:
            btn = RoundedButton(text=text, font_size=24, bg_color=color)
            btn.bind(on_press=self.on_button_press)
            self.keyboard.add_widget(btn)

        self.add_widget(self.keyboard)

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        extra_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.2), spacing=10)

        clear_btn = RoundedButton(text='C', bg_color=(0.8, 0.2, 0.2, 1), font_size=20)
        clear_btn.bind(on_press=self.clear_input)

        backspace_btn = RoundedButton(text='‚Üê', bg_color=(0.6, 0.6, 0.6, 1), font_size=20)
        backspace_btn.bind(on_press=self.backspace)

        day_btn = RoundedButton(text='–î–µ–Ω—å:', bg_color=(0.5, 0.3, 0.8, 1), font_size=16)
        day_btn.bind(on_press=lambda x: self.add_text('–¥–µ–Ω—å:'))

        help_btn = RoundedButton(text='?', bg_color=(0.3, 0.6, 0.9, 1), font_size=20)
        help_btn.bind(on_press=self.show_help)

        extra_layout.add_widget(clear_btn)
        extra_layout.add_widget(backspace_btn)
        extra_layout.add_widget(day_btn)
        extra_layout.add_widget(help_btn)

        self.add_widget(extra_layout)

        # –Ü—Å—Ç–æ—Ä—ñ—è –æ–±—á–∏—Å–ª–µ–Ω—å
        self.history = []

    def update_time(self, dt):
        self.time_label.text = datetime.datetime.now().strftime('%H:%M:%S | %d.%m.%Y')

    def add_quick_date(self, date_type):
        self.input.text += date_type

    def add_text(self, text):
        self.input.text += text

    def on_button_press(self, instance):
        text = instance.text
        if text == '=':
            self.calculate_result()
        else:
            self.input.text += text

    def clear_input(self, instance):
        self.input.text = ''
        self.result.text = '–†–µ–∑—É–ª—å—Ç–∞—Ç: '

    def backspace(self, instance):
        self.input.text = self.input.text[:-1]

    def calculate_result(self):
        expression = self.input.text.strip()
        if not expression:
            return

        result = calculate(expression)
        self.result.text = f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}'

        # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        self.history.append(f"{expression} = {result}")
        if len(self.history) > 50:  # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            self.history.pop(0)

    def show_help(self, instance):
        popup = HelpPopup()
        popup.open()


class DateCalculatorApp(App):
    def build(self):
        self.title = '–ö–∞–ª–µ–Ω–¥–∞—Ä-–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'
        return CalculatorLayout()


if __name__ == '__main__':
    DateCalculatorApp().run()